package com.example.courseproject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/enrollment") // This means URL's start with /demo (after Application path)
public class EnrollmentController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EnrollmentRepository enrollmentRepository;

    // path to Add a particular course
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewEnrollment(@RequestParam Integer studentId, @RequestParam Integer courseId){
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Enrollment enrollment = new Enrollment();
        enrollment.setStudentId(studentId);
        enrollment.setCourseId(courseId);
        enrollmentRepository.save(enrollment);
        return "Saved";
    }

    // alternate /add route to send in json object rather than path parameters
    @PostMapping(path="/add",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public @ResponseBody String addNewEnrollmentObject (@RequestBody Enrollment newEnrollment){
        Enrollment enrollment = enrollmentRepository.save(newEnrollment);
        return "Saved";
    }

//    // path to List all courses
//    @GetMapping(path="/list/{courseId}")
//    public @ResponseBody Iterable<Enrollment> getAllEnrollmentsForCourse(@PathVariable Integer courseId) {
//        // This returns a JSON or XML with the users
//        return enrollmentRepository.findAllByCourseId(courseId);
//    }

    @GetMapping(path="/list")
    public @ResponseBody Iterable<Enrollment> getAllEnrollmentsForCourse(@RequestParam Integer courseId) {
        // This returns a JSON or XML with the enrollment info for a course
        return enrollmentRepository.findAllByCourseId(courseId);
    }

    @GetMapping(path="/list")
    public @ResponseBody Iterable<Enrollment> getAllEnrollmentsForStudent(@RequestParam Integer studentId) {
        // This returns a JSON or XML with the enrollment info for a student
        return enrollmentRepository.findAllByStudentId(studentId);
    }

    // path to View one course based on ID
    @GetMapping(path="/view/{id}")
    public @ResponseBody Enrollment getEnrollment(@PathVariable Integer id) {
        // This returns a JSON or XML with the enrollments
        return enrollmentRepository.findEnrollmentByEid(id);
    }

    @PutMapping(path="/modify",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Enrollment modifyEnrollment(@RequestBody Enrollment modifiedEnrollment){
        Enrollment enrollment = enrollmentRepository.findEnrollmentByEid(modifiedEnrollment.getEid());

        enrollment.setCourseId(modifiedEnrollment.getCourseId());
        enrollment.setStudentId(modifiedEnrollment.getStudentId());

        final Enrollment updatedEnrollment = enrollmentRepository.save(enrollment);

        return updatedEnrollment;
    }

    @DeleteMapping(path="/delete")
    public @ResponseBody String deleteEnrollment(@RequestBody Enrollment enrollmentToDelete){
        Enrollment enrollment = enrollmentRepository.findEnrollmentByEid(enrollmentToDelete.getEid());
        enrollmentRepository.delete(enrollment);
        return "Student: " + enrollment.getStudentId() + " is no longer enrolled in Course: " + enrollment.getCourseId();
    }
}