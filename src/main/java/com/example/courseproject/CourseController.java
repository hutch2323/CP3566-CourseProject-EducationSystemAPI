package com.example.courseproject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/course") // This means URL's start with /demo (after Application path)
public class CourseController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CourseRepository courseRepository;
    @Autowired
    private EnrollmentRepository enrollmentRepository;
    @Autowired
    private GradesRepository gradesRepository;
    @Autowired
    private ProgramsRepository programsRepository;

    // path to Add a particular course
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewCourse (@RequestParam String courseName, @RequestParam String courseNumber,
                                               @RequestParam Integer capacity, @RequestParam String year,
                                               @RequestParam String semester, @RequestParam Integer pid ){
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Programs program = programsRepository.findProgramsByPid(pid);
        if (program == null){
            return "Program pid: " + pid + " does not exist.";
        }

        Course course = new Course();
        course.setCourseName(courseName);
        course.setCourseNumber(courseNumber);
        course.setCapacity(capacity);
        course.setYear(year);
        course.setSemester(semester);
        course.setPid(pid);
        courseRepository.save(course);
        return course.getCourseName() + "(" + course.getCourseNumber() + ") has been added.";
    }

    // alternate /add route to send in json object rather than path parameters
    @PostMapping(path="/add",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public @ResponseBody String addNewCourseObject (@RequestBody Course newCourse){
        Programs program = programsRepository.findProgramsByPid(newCourse.getPid());
        if (program == null){
            return "Program pid: " + newCourse.getPid() + " does not exist.";
        }

        Course course = courseRepository.save(newCourse);
        return course.getCourseName() + " (" + course.getCourseNumber() + ") has been added.";
    }

    // path to List all courses
    @GetMapping(path="/list")
    public @ResponseBody Iterable<Course> getAllCourses() {
        // This returns a JSON or XML with the users
        return courseRepository.findAll();
    }

    // path to List all courses by Program ID
    @GetMapping(path="/list/program")
    public @ResponseBody Iterable<Course> getAllCoursesByProgramId(@RequestParam Integer pid) {
        // This returns a JSON or XML with the users
        return courseRepository.getCourseByPid(pid);
    }

    // path to View one course based on ID
    @GetMapping(path="/view/{id}")
    public @ResponseBody Course getCourse(@PathVariable Integer id) {
        // This returns a JSON or XML with the users
        return courseRepository.findCourseByCourseId(id);
    }

    // path to Modify a course
    @PutMapping(path="/modify",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody String modifyCourse(@RequestBody Course modifiedCourse){
        Course course = courseRepository.findCourseByCourseId(modifiedCourse.getCourseId());
        if (course == null){
            return "Course ID: " + modifiedCourse.getCourseId() + " does not exist.";
        }

        Programs program = programsRepository.findProgramsByPid(modifiedCourse.getPid());
        if (program == null){
            return "Program pid: " + modifiedCourse.getPid() + " does not exist.";
        }

        course.setCourseName(modifiedCourse.getCourseName());
        course.setCourseNumber(modifiedCourse.getCourseNumber());
        course.setCapacity(modifiedCourse.getCapacity());
        course.setYear(modifiedCourse.getYear());
        course.setSemester(modifiedCourse.getSemester());
        course.setPid(modifiedCourse.getPid());

        final Course updatedCourse = courseRepository.save(course);
        return "Course ID: " + modifiedCourse.getCourseId() + " has been modified.";
    }

    // path to delete a course
    @DeleteMapping(path="/delete")
    public @ResponseBody String deleteCourse(@RequestParam Integer courseId){
        Course course = courseRepository.findCourseByCourseId(courseId);
        if (course == null){
            return "Course ID: " + courseId + " does not exist.";
        }

        System.out.println(course.getCourseId());
        List<Enrollment> enrollmentsToRemove = enrollmentRepository.getEnrollmentByCourseId(course.getCourseId());
        List<Grades> gradesToRemove = gradesRepository.getGradesByCourseId(course.getCourseId());

        for (Enrollment enrollment : enrollmentsToRemove){
            System.out.println("Enrollment ID: " + enrollment.getEid());
            enrollmentRepository.delete(enrollment);
        }

        for (Grades grade : gradesToRemove){
            System.out.println("Grade ID: " + grade.getGid());
            gradesRepository.delete(grade);
        }

        courseRepository.delete(course);
        return course.getCourseNumber() + ": " + course.getCourseName() + " has been deleted.";
    }
}